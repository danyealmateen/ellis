{"mappings":"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","sources":["src/modules/domElements.ts","src/modules/api.ts","src/modules/app.ts"],"sourcesContent":["export const elements = {\n    logInpage: document.getElementById('logInpage') as HTMLDivElement,\n    container: document.getElementById('container') as HTMLDivElement,\n    body: document.getElementById('body') as HTMLBodyElement,\n    imageSelection: document.getElementById(\"image-selection\") as HTMLSelectElement | null,\n    createAccountButton: document.getElementById(\"create-account-button\") as HTMLButtonElement | null,\n    submitButton: document.getElementById(\"submit-button\") as HTMLButtonElement | null,\n    usernameInput: document.getElementById(\"username\") as HTMLInputElement | null,\n    passwordInput: document.getElementById(\"password\") as HTMLInputElement | null,\n    errorMessage: document.createElement(\"p\"),\n    userDeletedSuccessfully: document.createElement('h1'),\n    failedToDeleteUser: document.createElement('h1'),\n    accountCreated: document.createElement(\"h1\"),\n    currentUser: document.getElementById(\"current-user\") as HTMLHeadingElement | null,\n    statusUpdates: document.getElementById(\"status-updates\") as HTMLUListElement | null,\n    loggedInUsersList: document.querySelector('.js-logged-in-users-list') as HTMLElement,\n    deleteAccountButton: document.getElementById(\"delete-account-button\") as HTMLButtonElement | null,\n    statusInput: document.getElementById(\"status-input\") as HTMLInputElement | null,\n    submitStatus: document.getElementById(\"submit-status\") as HTMLButtonElement,\n    allUsersList: document.getElementById(\"allUsersList\") as HTMLUListElement,\n    userStatus: document.getElementById('userStatus') as HTMLElement,\n};\n\nif (elements.logInpage) {\n    elements.logInpage.style.display = \"block\";\n}\n\nelements.container.style.display = \"none\";\nelements.body.appendChild(elements.container);\n\nconst errorMessage = document.createElement(\"div\");\nerrorMessage.className = \"error-message\";\n","import { UserInfo, FirebaseResponse } from './interfaces';\n\nconst baseUrl = \"https://social-media-68d76-default-rtdb.europe-west1.firebasedatabase.app/\";\n\nexport async function getUsers(): Promise<UserInfo[]> {\n    try {\n      const response = await fetch(`${baseUrl}users.json`);\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n      }\n      const users: FirebaseResponse | null = await response.json();\n      if (!users) {\n        return [];\n      }\n      const usersArray: UserInfo[] = Object.values(users);\n      return usersArray;\n    } catch (err) {\n      throw new Error(\"Failed to fetch users\");\n    }\n  }\n  \n\n  export async function saveUser(user: UserInfo): Promise<void> {\n    const arrData = await getUsers();\n    const url = `${baseUrl}users/${user.userName}.json`;\n    const init = {\n      method: \"PUT\",\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    };\n  \n    try {\n      const response = await fetch(url, init);\n  \n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n      }\n  \n    } catch (err) {\n      console.log(err);\n      throw new Error(\"Failed to save user information.\");\n    }\n  }\n  \n\n\nexport async function deleteUser(username: string): Promise<void> {\n    const url = `${baseUrl}users/${username}.json`;\n    const init = {\n        method: \"DELETE\",\n    };\n\n    try {\n        const response = await fetch(url, init);\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n    } catch (err) {\n        console.log(err);\n        throw new Error(\"Failed to delete user.\");\n    }\n}\n\nexport async function addStatusUpdate(newStatus: string): Promise<void> {\n  const currentUser = await getLoggedInUser(); // Use getLoggedInUser() instead of getCurrentUser()\n  if (!currentUser) {\n    throw new Error(\"User not found.\");\n  }\n\n  currentUser.status = newStatus;\n\n  const url = `${baseUrl}users/${currentUser.userName}.json`;\n  const init = {\n    method: \"PUT\",\n    body: JSON.stringify(currentUser),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n    },\n  };\n\n  try {\n    const response = await fetch(url, init);\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status} ${response.statusText}`);\n    }\n  } catch (err) {\n    console.log(err);\n    throw new Error(\"Failed to add status update.\");\n  }\n}\n\n\nexport async function getCurrentUser(): Promise<UserInfo | null> {\n  const loggedInUserName = localStorage.getItem(\"loggedInUser\");\n  if (loggedInUserName) {\n    return await getUserByUsername(loggedInUserName);\n  }\n  return null;\n}\n\n// Export getUserByUsername function\nexport async function getUserByUsername(username: string): Promise<UserInfo | null> {\n  const users = await getUsers();\n  const currentUser = users.find((user) => user.userName === username);\n  return currentUser || null;\n}\n\n\nexport async function getLoggedInUser(): Promise<UserInfo | null> {\n  const loggedInUserName = localStorage.getItem(\"loggedInUser\");\n  if (loggedInUserName) {\n    return await getUserByUsername(loggedInUserName);\n  }\n  return null;\n}\n\n  ","//Importerar de nödvändiga DOM-elementen och gränssnitten från respektive moduler\nimport { elements } from \"./domElements\";\nimport { UserInfo, StatusUpdate } from \"./interfaces\";\nimport {\n  getUsers,\n  saveUser,\n  getCurrentUser,\n  deleteUser,\n  getUserByUsername,\n} from \"./api\";\n\n// funktion för att skapa en ny användare\nasync function createUser() {\n  // hämtar värdena för användarnamn, lösenord och vald bild från inputfälten\n  const userName = elements.usernameInput!.value.trim();\n  const password = elements.passwordInput!.value.trim();\n  const selectedImage = elements.imageSelection!.value.trim();\n\n  if (userName && password && selectedImage) {\n    try {\n      // kontrollerar om användarnamnet redan finns\n      const existingUser = await getUserByUsername(userName);\n      if (existingUser) {\n        // visar felmeddelande om användarnamnet redan finns\n        elements.errorMessage.innerHTML =\n          \"Username already exists. Please choose a different username.\";\n        elements.body.appendChild(elements.errorMessage);\n        setTimeout(() => {\n          elements.errorMessage.remove();\n        }, 3000);\n        return;\n      }\n\n      // skapar ett nytt användarobjekt\n      const newUser: UserInfo = {\n        userName: userName,\n        password: password,\n        status: \"\",\n        imageurl: selectedImage,\n        newUser: true,\n        statusUpdates: [],\n      };\n\n      //Sparar den nya användaren\n      await saveUser(newUser);\n      // visar meddelande om att kontot har skapats\n      elements.accountCreated.innerHTML = \"Account Created! Now you can login!\";\n      elements.body.appendChild(elements.accountCreated);\n      setTimeout(() => {\n        elements.accountCreated.remove();\n      }, 1500);\n    } catch (err) {\n      // Loggar fel och visar felmeddelande om kontot inte kunde skapas\n      console.log(err);\n      elements.errorMessage.innerHTML = \"Failed to create account. Try again.\";\n      elements.body.appendChild(elements.errorMessage);\n      setTimeout(() => {\n        elements.errorMessage.remove();\n      }, 3000);\n    }\n  } else {\n    // Visar felmeddelande om något fält är tomt\n    elements.errorMessage.innerHTML = \"Please fill in all fields.\";\n    elements.body.appendChild(elements.errorMessage);\n    setTimeout(() => {\n      elements.errorMessage.remove();\n    }, 3000);\n  }\n}\n\n// Funktion för att logga in en användare\nasync function loginUser() {\n  // Hämtar användarnamn och lösenord från inputfälten\n  const userName = elements.usernameInput!.value.trim();\n  const password = elements.passwordInput!.value.trim();\n\n  //Kontrollerar att både användarnamn och lösenord är angivna\n  if (userName && password) {\n    try {\n      //hämtar alla användare och letar upp användaren med matchande användarnamn och lösenord\n      const users = await getUsers();\n      const foundUser = users.find(\n        (user) => user.userName === userName && user.password === password\n      );\n\n      // Om användaren inte hittas visas felmeddelande\n      if (!foundUser) {\n        elements.errorMessage.innerHTML =\n          \"Username does not exist. Please create an account before logging in.\";\n        elements.body.appendChild(elements.errorMessage);\n        setTimeout(() => {\n          elements.errorMessage.remove();\n        }, 3000);\n        return;\n      }\n\n      //markerar användaren som inte längre ny och uppdaterar statusen till \"logged-in\"\n      foundUser.newUser = false;\n      foundUser.status = \"logged-in\";\n\n      //sparar användaren med de uppdaterade egenskaperna\n      await saveUser(foundUser);\n\n      // Sparar användarnamnet för den inloggade användaren i localStorage\n      localStorage.setItem(\"loggedInUser\", foundUser.userName);\n\n      // visar listan över alla användare gömmer inloggningssidan och visar huvudsidan\n      elements.allUsersList.style.display = \"block\";\n      elements.logInpage.style.display = \"none\";\n      elements.container.style.display = \"block\";\n\n      // Visar det aktuella användarnamnet på sidan\n      if (elements.currentUser) {\n        elements.currentUser.textContent = `${foundUser.userName}`;\n      } else {\n        console.error(\"elements.currentUser is null\");\n      }\n\n      //Visar de inloggade användarna och användarens status\n      displayLoggedInUsers();\n      displayUserStatus();\n\n      //hantering av fel vid inloggning\n    } catch (err) {\n      console.log(err);\n      elements.errorMessage.innerHTML = \"Failed to log in. Try again.\";\n      elements.body.appendChild(elements.errorMessage);\n      setTimeout(() => {\n        elements.errorMessage.remove();\n      }, 3000);\n    }\n    // Hanterar vid inloggning tomma fält om en användare försöker logga in \n  } else {\n    elements.errorMessage.innerHTML = \"Please enter a username and password.\";\n    elements.body.appendChild(elements.errorMessage);\n    setTimeout(() => {\n      elements.errorMessage.remove();\n    }, 3000);\n  }\n\n  // Visar \"Logga ut\" och \"Radera konto\" knapparna\n  document.getElementById(\"logoutButton\")!.style.display = \"block\";\n  document.getElementById(\"delete-account-button\")!.style.display = \"block\";\n}\n\n// Lägger till huvudsidan före listan över alla användare i DOM:en\nelements.allUsersList!.parentNode!.insertBefore(\n  elements.container,\n  elements.allUsersList\n);\n\n// Funktion som visar användarens status\nasync function displayUserStatus() {\n  const currentUser = await getCurrentUser();\n  if (currentUser) {\n    elements.userStatus!.textContent = `${currentUser.userName}'s status: ${currentUser.status}`;\n  }\n}\n\n//Funktion för att lägga till en ny statusuppdatering\nasync function addStatusUpdate() {\n  const newStatus = elements.statusInput!.value.trim();\n\n  if (newStatus) {\n    try {\n      const currentUser = await getCurrentUser();\n      if (currentUser) {\n        if (!currentUser.statusUpdates) {\n          currentUser.statusUpdates = [];\n        }\n        const timestamp = new Date().toISOString();\n        currentUser.statusUpdates.push({\n          status: newStatus,\n          timestamp: timestamp,\n        });\n        await saveUser(currentUser);\n        elements.statusInput!.value = \"\";\n        displayAllUsers();\n      } else {\n        elements.errorMessage.innerHTML = \"Failed to find the current user.\";\n        elements.body.appendChild(elements.errorMessage);\n        setTimeout(() => {\n          elements.errorMessage.remove();\n        }, 3000);\n      }\n    } catch (err) {\n      console.log(err);\n      elements.errorMessage.innerHTML = \"Failed to update status. Try again.\";\n      elements.body.appendChild(elements.errorMessage);\n      setTimeout(() => {\n        elements.errorMessage.remove();\n      }, 3000);\n    }\n  } else {\n    elements.errorMessage.innerHTML = \"Please enter a status update.\";\n    elements.body.appendChild(elements.errorMessage);\n    setTimeout(() => {\n      elements.errorMessage.remove();\n    }, 3000);\n  }\n}\n\n// Funktion för att visa inloggade användare\nasync function displayLoggedInUsers() {\n  const users = await getUsers();\n  const currentUser = await getCurrentUser();\n\n  users.forEach((user) => {\n    const li = document.createElement(\"li\");\n    li.textContent = `${user.userName}:`;\n\n    if (elements.loggedInUsersList) {\n      elements.loggedInUsersList.appendChild(li);\n    }\n  });\n}\n\n// Funktion för att visa alla användare med deras senaste statusuppdateringar och profilbilder\nasync function displayAllUsers() {\n  try {\n    const allUsers = await getUsers();\n    const userList = document.createElement(\"ul\");\n    allUsers.forEach((user: UserInfo) => {\n      const listItem = document.createElement(\"li\");\n      listItem.classList.add(\"user-item\");\n      const latestStatus: StatusUpdate | \"\" =\n        user.statusUpdates && user.statusUpdates.length > 0\n          ? user.statusUpdates[user.statusUpdates.length - 1]\n          : \"\";\n\n      // Formaterar datumet för den senaste statusuppdateringen\n      let formattedDate = \"\";\n      if (typeof latestStatus === \"object\" && latestStatus !== null) {\n        const date = latestStatus.timestamp\n          ? new Date(latestStatus.timestamp)\n          : null;\n        formattedDate = date\n          ? `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\n              2,\n              \"0\"\n            )}-${String(date.getDate()).padStart(2, \"0\")} ${String(\n              date.getHours()\n            ).padStart(2, \"0\")}:${String(date.getMinutes()).padStart(\n              2,\n              \"0\"\n            )}:${String(date.getSeconds()).padStart(2, \"0\")}`\n          : \"\";\n      }\n\n      // Skapar användarens profilbild\n      const userImage = document.createElement(\"img\");\n      userImage.src = user.imageurl;\n      userImage.width = 50;\n      userImage.height = 50;\n      userImage.style.marginRight = \"5px\";\n\n      // Skapar textnoden för användarnamnet och statusuppdateringen\n      const userNameText = document.createTextNode(\n        `${user.userName} - Last status: ${\n          typeof latestStatus === \"object\" && latestStatus !== null\n            ? latestStatus.status\n            : \"No status update yet\"\n        } ${formattedDate ? `(${formattedDate})` : \"\"}`\n      );\n\n      listItem.appendChild(userImage);\n      listItem.appendChild(userNameText);\n\n      // Lägg er till en eventlistener för att besöka den andra användarens sida\n      listItem.addEventListener(\"click\", () => {\n        visitOtherUserPage(user.userName);\n      });\n      userList.appendChild(listItem);\n    });\n    if (elements.allUsersList) {\n      elements.allUsersList.innerHTML = \"\";\n      elements.allUsersList.appendChild(userList);\n    }\n  } catch (err: any) {\n    console.log(err?.message ?? err);\n  }\n}\n\n// Funktion för att besöka en annan användares sida och visa deras statusuppdateringar\nasync function visitOtherUserPage(username: string): Promise<void> {\n  // hämtar användaren med det angivna användarnamnet\n  const user = await getUserByUsername(username);\n\n  // Visar tillbakaknappen och döljer statusuppdateringar och användarlistan\n  document.getElementById(\"backButton\")!.style.display = \"block\";\n  elements.statusUpdates!.style.display = \"none\";\n  const listElements = document.querySelectorAll(\".user-item\");\n  listElements.forEach((element) => {\n    (element as HTMLElement).style.display = \"none\";\n  });\n\n  // om användaren inte hittas så visas ett fel där det står att användaren unte hittas\n  if (!user) {\n    throw new Error(\"User not found.\");\n  }\n\n  // Hämtar nödvändiga element för att visa den andra användarens sida\n  const loggedInUsersPage = document.getElementById(\"container\");\n  const otherUserPage = document.getElementById(\"otherUserPage\");\n\n  // Om elementen finns uppdateras sidan med den andra användarens information\n  if (loggedInUsersPage && otherUserPage) {\n    loggedInUsersPage.style.display = \"none\";\n    otherUserPage.style.display = \"block\";\n    otherUserPage.querySelector(\".username\")!.textContent = user.userName;\n    otherUserPage\n      .querySelector(\".profile-pic\")!\n      .setAttribute(\"src\", user.imageurl);\n\n    // Hämtar statusuppdateringarnas \"container\" från otherUserPage\n    const statusUpdatesContainer =\n      otherUserPage.querySelector(\".status-updates\");\n\n    // Om statusUpdatesContainer finns\n    if (statusUpdatesContainer) {\n      // Rensar statusUpdatesContainer\n      statusUpdatesContainer.innerHTML = \"\";\n\n      // Om användaren har statusuppdateringar\n      if (user.statusUpdates) {\n        // Sorterar statusuppdateringar i fallande ordning baserat på tidsstämpel\n        user.statusUpdates.sort(\n          (a, b) =>\n            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n        );\n\n        // Loopar igenom varje statusuppdatering\n        user.statusUpdates.forEach((statusUpdate) => {\n          // Skapar ett nytt p element för varje statusuppdatering\n          const statusElement = document.createElement(\"p\");\n\n          // Formaterar datumet för statusuppdateringen\n          const date = new Date(statusUpdate.timestamp);\n          const formattedDate = `${date.getFullYear()}-${String(\n            date.getMonth() + 1\n          ).padStart(2, \"0\")}-${String(date.getDate()).padStart(\n            2,\n            \"0\"\n          )} ${String(date.getHours()).padStart(2, \"0\")}:${String(\n            date.getMinutes()\n          ).padStart(2, \"0\")}:${String(date.getSeconds()).padStart(2, \"0\")}`;\n\n          // Anger textinnehållet i statusElement som statusuppdateringens formaterade datum och status\n          statusElement.textContent = `${formattedDate}: ${statusUpdate.status}`;\n\n          // Lägger till statusElement i statusUpdatesContainer\n          statusUpdatesContainer.appendChild(statusElement);\n        });\n      } else {\n        // Om användaren inte har några statusuppdateringar skapas ett p element med textinnehållet \"No status update yet.\"\n        const noStatusElement = document.createElement(\"p\");\n        noStatusElement.textContent = \"No status update yet.\";\n\n        // Lägger till noStatusElement i statusUpdatesContainer\n        statusUpdatesContainer.appendChild(noStatusElement);\n      }\n    } else {\n      console.error(\"Error: statusUpdatesContainer element is missing.\");\n    }\n  } else {\n    // Om statusUpdatesContainer inte hittades loggas ett felmeddelande i konsolen\n    console.error(\n      \"Error: loggedInUsersPage or otherUserPage element is missing.\"\n    );\n  }\n}\n\n// Funktion för att återgå till huvudvyn\nfunction goBackToMainView() {\n  // Hämtar element för inloggade användares sida och andra användarens sida\n  const loggedInUsersPage = document.getElementById(\"container\");\n  const otherUserPage = document.getElementById(\"otherUserPage\");\n\n  // Döljer tillbaka-knappen\n  document.getElementById(\"backButton\")!.style.display = \"none\";\n\n  // Visar huvudsidan och döljer den andra användarens sida\n  if (loggedInUsersPage && otherUserPage) {\n    loggedInUsersPage.style.display = \"block\";\n    otherUserPage.style.display = \"none\";\n\n    // Visar användarlistan\n    const userListWrapper = document.getElementById(\"userListWrapper\");\n    if (userListWrapper) {\n      userListWrapper.style.display = \"block\";\n    }\n\n    // Visar statusuppdateringar och användarlistelement\n    elements.statusUpdates!.style.display = \"block\";\n    const listElements = document.querySelectorAll(\".user-item\");\n    listElements.forEach((element) => {\n      (element as HTMLElement).style.display = \"block\";\n    });\n  } else {\n    console.error(\n      \"Error: loggedInUsersPage or otherUserPage element is missing.\"\n    );\n  }\n}\n\n// Kontrollerar om en användare är inloggad\nasync function checkIfUserIsLoggedIn() {\n  // Hämtar den inloggade användarens användarnamn från localStorage\n  const loggedInUserName = localStorage.getItem(\"loggedInUser\");\n\n  // Om det finns en inloggad användare\n  if (loggedInUserName) {\n    // Hämtar användaren med användarnamnet\n    const foundUser = await getUserByUsername(loggedInUserName);\n\n    // Om användaren hittades och statusen är \"logged-in\"\n    if (foundUser && foundUser.status === \"logged-in\") {\n      // Gömmer inloggningssidan och visar användarlistan och huvudsidan\n      elements.logInpage.style.display = \"none\";\n      elements.allUsersList.style.display = \"block\";\n      elements.container.style.display = \"block\";\n\n      //uppdaterar det aktuella användarnamnet i sidhuvudet\n      if (elements.currentUser) {\n        elements.currentUser.textContent = `${foundUser.userName}`;\n      } else {\n        console.error(\"elements.currentUser is null\");\n      }\n\n      //visar inloggade användare och användarstatus\n      displayLoggedInUsers();\n      displayUserStatus();\n\n      // visar utloggning och radera konto-knapparna\n      document.getElementById(\"logoutButton\")!.style.display = \"block\";\n      document.getElementById(\"delete-account-button\")!.style.display = \"block\";\n    }\n  }\n}\n\n// Funktion för att omdirigera till inloggningssidan efter utloggning\nasync function redirectToLogin() {\n  // Loggar ut och uppdaterar användarstatus\n  await logoutAndUpdateStatus().then(() => {\n    location.assign('./index.html');\n  })\n  //omdirigerar användaren till hemsidan (inloggningssidan)\n   \n  \n}\n\n// Lägger till en eventlistener för utloggning\ndocument\n  .getElementById(\"logoutButton\")\n  ?.addEventListener(\"click\", redirectToLogin);\n\n// Funktion för att logga ut och uppdatera användarstatus\nasync function logoutAndUpdateStatus() {\n  // Hämta den aktuella användaren\n  const currentUser = await getCurrentUser();\n  if (currentUser) {\n    // Ändrar användarstatus till \"logged-out\"\n    currentUser.status = \"logged-out\";\n\n    // Sparar användaren med den uppdaterade statusen\n    await saveUser(currentUser);\n  }\n\n  // Tar bort den inloggade användaren från localStorage\n  localStorage.removeItem(\"loggedInUser\");\n}\n\n// Funktion för att radera den aktuella användaren\nasync function deleteCurrentUser() {\n  // Hämtar användarnamn och lösenord från formuläret\n  const userName = elements.usernameInput!.value.trim();\n  const password = elements.passwordInput!.value.trim();\n\n  //om både användarnamn och lösenord anges\n  if (userName && password) {\n    try {\n      //hämtas alla användare\n      const users = await getUsers();\n\n      //hittar användaren med matchande användarnamn och lösenord\n      const foundUser = users.find(\n        (user) => user.userName === userName && user.password === password\n      );\n\n      // Om användaren hittades\n      if (foundUser) {\n        // Raderar användaren\n        await deleteUser(foundUser.userName);\n\n        // Tar bort den inloggade användaren från localStorage\n        localStorage.removeItem(\"loggedInUser\");\n\n        // Visar meddelande om att användaren har raderats\n        elements.userDeletedSuccessfully.innerHTML =\n          \"User deleted successfully!\";\n        elements.body.appendChild(elements.userDeletedSuccessfully);\n        setTimeout(() => {\n          elements.userDeletedSuccessfully.remove();\n        }, 3000);\n\n        // Uppdaterar gränssnittet för att visa inloggningssidan och döljer andra element\n        elements.allUsersList.style.display = \"none\";\n        elements.usernameInput!.value = \"\";\n        elements.passwordInput!.value = \"\";\n        elements.logInpage.style.display = \"block\";\n        document.getElementById(\"otherUserPage\")!.style.display = \"none\";\n        document.getElementById(\"container\")!.style.display = \"none\";\n        document.getElementById(\"logoutButton\")!.style.display = \"none\";\n        document.getElementById(\"delete-account-button\")!.style.display =\n          \"none\";\n        document.getElementById(\"backButton\")!.style.display = \"none\";\n\n        //Hämtar och visar alla användare igen\n        await displayAllUsers();\n      } else {\n        // Visar felmeddelande om felaktigt användarnamn eller lösenord\n        elements.failedToDeleteUser.innerHTML =\n          \"Failed to delete user. Incorrect username or password.\";\n        elements.body.appendChild(elements.failedToDeleteUser);\n        setTimeout(() => {\n          elements.failedToDeleteUser.remove();\n        }, 3000);\n      }\n    } catch (err) {\n      // Visar felmeddelande om något gick fel\n      console.log(err);\n      elements.failedToDeleteUser.innerHTML =\n        \"Failed to delete user. Try again.\";\n      elements.body.appendChild(elements.failedToDeleteUser);\n      setTimeout(() => {\n        elements.failedToDeleteUser.remove();\n      }, 3000);\n    }\n    //om användarnamn och lösenord inte är angivna\n  } else {\n    //visa ett felmeddelande om användarnamn och lösenord saknas\n    elements.errorMessage.innerHTML = \"Please enter a username and password.\";\n    elements.body.appendChild(elements.errorMessage);\n    setTimeout(() => {\n      elements.errorMessage.remove();\n    }, 3000);\n  }\n}\n\n// funktion för att konfigurera eventlistener för knappar och formulär\nfunction setupEventListeners() {\n  // lägger till eventlistener för konto-skapande-knappen\n  elements.createAccountButton!.addEventListener(\"click\", () => {\n    createUser();\n  });\n\n  // Lägger till eventlistener för inloggningsknappen\n  elements.submitButton!.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    loginUser();\n  });\n\n  // Lägger till eventlistener för radera-konto-knappen\n  elements.deleteAccountButton!.addEventListener(\"click\", () => {\n    deleteCurrentUser();\n  });\n\n  // Lägger till eventlistener för statusuppdateringsknappen\n  elements.submitStatus!.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    addStatusUpdate();\n  });\n\n  // Lägger till eventlistener  för tillbaka-knappen om den finns\n  const backButton = document.getElementById(\"backButton\");\n  if (backButton) {\n    backButton.addEventListener(\"click\", goBackToMainView);\n  } else {\n    // Visar felmeddelande om tillbaka-knappen saknas\n    console.error(\"Error: backButton element is missing.\");\n  }\n}\n\n// Init-funktion som körs när sidan laddas\nasync function init() {\n  // Väntar tills sidan har laddats\n  document.addEventListener(\"DOMContentLoaded\", async () => {\n    //konfigurerar eventlisteners\n    setupEventListeners();\n\n    //visar alla användare\n    await displayAllUsers();\n\n    //kontrollerar om en användare är inloggad\n    await checkIfUserIsLoggedIn();\n  });\n}\n\n//startar init-funktionen\ninit();\n"],"names":["$180a3ec4d9117066$export$7a5d735b2ab6389d","logInpage","document","getElementById","container","body","imageSelection","createAccountButton","submitButton","usernameInput","passwordInput","errorMessage","createElement","userDeletedSuccessfully","failedToDeleteUser","accountCreated","currentUser","statusUpdates","loggedInUsersList","querySelector","deleteAccountButton","statusInput","submitStatus","allUsersList","userStatus","style","display","appendChild","className","$fe11eb32f95cc6d1$var$baseUrl","async","$fe11eb32f95cc6d1$export$925a4945a6cd0f3e","response","fetch","ok","Error","status","statusText","users","json","Object","values","err","$fe11eb32f95cc6d1$export$ca0e1882e225378b","user","url","userName","init","method","JSON","stringify","headers","console","log","$fe11eb32f95cc6d1$export$7d0f10f273c0438a","username","$fe11eb32f95cc6d1$export$e5432d4c8eb97ea7","loggedInUserName","localStorage","getItem","$fe11eb32f95cc6d1$export$fe689bf0ea1a115a","find","$afc4fdb57cd652c4$var$displayUserStatus","textContent","$afc4fdb57cd652c4$var$displayLoggedInUsers","forEach","li","$afc4fdb57cd652c4$var$displayAllUsers","allUsers","userList","listItem","classList","add","latestStatus","length","formattedDate","date","timestamp","Date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","userImage","src","imageurl","width","height","marginRight","userNameText","createTextNode","addEventListener","querySelectorAll","element","loggedInUsersPage","otherUserPage","setAttribute","statusUpdatesContainer","innerHTML","sort","a","b","getTime","statusUpdate","statusElement","noStatusElement","error","$afc4fdb57cd652c4$var$visitOtherUserPage","message","$afc4fdb57cd652c4$var$goBackToMainView","userListWrapper","$afc4fdb57cd652c4$var$deleteCurrentUser","value","trim","password","foundUser","removeItem","setTimeout","remove","$afc4fdb57cd652c4$var$setupEventListeners","selectedImage","newUser","$afc4fdb57cd652c4$var$createUser","event","preventDefault","setItem","$afc4fdb57cd652c4$var$loginUser","newStatus","toISOString","push","$afc4fdb57cd652c4$var$addStatusUpdate","backButton","parentNode","insertBefore","$afc4fdb57cd652c4$var$logoutAndUpdateStatus","then","location","assign","$afc4fdb57cd652c4$var$checkIfUserIsLoggedIn","$afc4fdb57cd652c4$var$init"],"version":3,"file":"index.f2b40474.js.map"}